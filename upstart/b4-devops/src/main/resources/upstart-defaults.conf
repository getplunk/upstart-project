# all file-paths herein should be relative to ${B4_ROOT}. This allows consuming projects that operate elsewhere
# to reference these target-definitions, by overriding B4_ROOT as appropriate relative to their location

#### structured b4 configuration starts here ####
b4 {
  targetTemplates {
    java-images {
      mixins: [maven-projects] // this java-images template "mixes in" the maven-projects template above

      targets {
      }

      template: """
        /docker {
          /assemble/%{NAME} {
            description: "Assemble docker-build directory for %{projectPath}"
            dependencies: [b4-maven%with-docker-profile, build/%{NAME}]
          }

          /%{NAME} {
            description: "Build docker-image for %{projectPath}"
            dependencies: [docker/assemble/%{NAME}]
            tasks {
              docker/build<"%{NAME}"> { name: "%{NAME}", dockerAssemblyDir: "%{projectPath}/target/package", dockerBuildArgs: {} }
            }
          }
        }
      """
    }
  }

  # B4Function classes implement discrete steps that can be invoked by targets
  functions {

    /docker/build: upstart.b4.devops.DockerBuildFunction

    /nexus/download: upstart.b4.devops.NexusDownloadFunction

    helm/render: upstart.b4.devops.HelmRenderFunction

    /deploy/k8s {
      impl: upstart.b4.devops.KubeApplyFunction
      module: upstart.b4.devops.Fabric8Module
    }
  }

  targets {
    /assemble/all {
      description: "build, package, and assemble all projects"
      dependencies: [docker/assemble]
      taskConfig.mvn.buildAllProjects: true
    }

    /b4-maven {
      %with-docker-profile.taskConfig.mvn: "extraArgs: ${?b4.tasks.mvn.extraArgs} [-Pdocker]"
    }

    /docker {
      description: "build docker images"

      /assemble {
        description: "assemble source-directories for docker build"
        dependencies: [b4-maven%with-docker-profile]
      }
    }
  }

  tasks {
  }
}